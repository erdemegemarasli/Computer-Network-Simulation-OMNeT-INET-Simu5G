[Config cableLength_20km]
*.cableLength = 20km
output-scalar-file  = results/cableLength_20km.sca
output-vector-file  = results/cableLength_20km.vec
[Config cableLength_200km]
*.cableLength = 200km
output-scalar-file  = results/cableLength_200km.sca
output-vector-file  = results/cableLength_200km.vec
[Config cableLength_2000km]
*.cableLength = 2000km
output-scalar-file  = results/cableLength_2000km.sca
output-vector-file  = results/cableLength_2000km.vec
[Config cableBandwidth_1000Mbps]
*.cableBandwidth = 1000Mbps
output-scalar-file  = results/cableBandwidth_1000Mbps.sca
output-vector-file  = results/cableBandwidth_1000Mbps.vec
[Config serverRouterBufferCapacity_1]
*.*router.eth[*].queue.packetCapacity = 1
output-scalar-file  = results/serverRouterBufferCapacity_1.sca
output-vector-file  = results/serverRouterBufferCapacity_1.vec
[Config serverRouterBufferCapacity_2]
*.*router.eth[*].queue.packetCapacity = 2
output-scalar-file  = results/serverRouterBufferCapacity_2.sca
output-vector-file  = results/serverRouterBufferCapacity_2.vec
[Config serverRouterBufferCapacity_3]
*.*router.eth[*].queue.packetCapacity = 3
output-scalar-file  = results/serverRouterBufferCapacity_3.sca
output-vector-file  = results/serverRouterBufferCapacity_3.vec
[Config serverRouterBufferCapacity_4]
*.*router.eth[*].queue.packetCapacity = 4
output-scalar-file  = results/serverRouterBufferCapacity_4.sca
output-vector-file  = results/serverRouterBufferCapacity_4.vec
[Config clearPacketDropObservation]
*.*router.eth[*].queue.packetCapacity = 1
*.bunkerhost[*].app[0].sendInterval = int(uniform(1s, 1s))
*.bunkerhost[*].app[1].sendInterval = int(uniform(2s, 2s))
output-scalar-file  = results/clearPacketDropObservation.sca
output-vector-file  = results/clearPacketDropObservation.vec
[Config clearHeartBeatDropObservation]
*.server.app[0].heartbeatThreshold = 3
output-scalar-file  = results/clearHeartBeatDropObservation.sca
output-vector-file  = results/clearHeartBeatDropObservation.vec

[Config General]
network = Network

sim-time-limit 		= 300s
seed-0-mt           = 1

output-scalar-file  = results/General.sca
output-vector-file  = results/General.vec

# Configurator settings
*.configurator.dumpAddresses = true
*.configurator.dumpTopology = true
*.configurator.dumpLinks = true
*.configurator.dumpRoutes = true
*.configurator.config = xmldoc("config.xml")

# Visualizer settings
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.interfaceTableVisualizer.nodeFilter = "not (*router*)"

# Link settings
*.cableBandwidth = 100Mbps
*.cableLength = 2km

*.cableBandwidth.param-record-as-scalar = true
*.cableLength.param-record-as-scalar = true

# Routing settings
*.*.ipv4.arp.typename = "GlobalArp"
*.*.ipv4.routingTable.netmaskRoutes = ""

# Router settings
*.*router.eth[*].queue.typename = "DropTailQueue"
*.*router.eth[*].queue.packetCapacity = 10

*.server.numApps = 1
*.server.app[0].typename = "ServerApp"
*.server.app[0].heartbeatThreshold = 15

# Bunker & Host numbers
*.bunker_number = ${bnum=int(uniform(2, 5))}
*.host_number = ${hnum=int(uniform(2, 5))}
*.nonExist_host_number = ${xnum=int(uniform(1, 2))}

*.bunker_number.param-record-as-scalar = true
*.host_number.param-record-as-scalar = true
*.nonExist_host_number.param-record-as-scalar = true

*.bunkerhost[*].numApps = 2
*.bunkerhost[*].app[*].destAddress = "server"
*.bunkerhost[*].app[0].sendInterval = int(uniform(5s, 10s))
*.bunkerhost[*].app[1].sendInterval = int(uniform(6s, 12s))
*.bunkerhost[*].app[0].typename = "HeartBeatApp"
*.bunkerhost[*].app[1].typename = "ClientApp"

*.bunkerhost[*].app[1].bunker_number = ${bnum}
*.bunkerhost[*].app[1].host_number = ${hnum}
*.bunkerhost[*].app[1].nonExist_host_number = ${xnum}