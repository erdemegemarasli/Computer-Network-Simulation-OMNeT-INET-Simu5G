//
// Generated file, do not edit! Created by opp_msgtool 6.0 from BunkerPacket.msg.
//

#ifndef __INET_BUNKERPACKET_M_H
#define __INET_BUNKERPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class BunkerPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3AddressTag_m.h" // import inet.networklayer.common.L3AddressTag


namespace inet {

/**
 * Class generated from <tt>BunkerPacket.msg:8</tt> by opp_msgtool.
 * <pre>
 * class BunkerPacket extends FieldsChunk
 * {
 *     // Type-0 = Heartbeat
 *     // Type-1 = Lookup request
 *     // Type-2 = Lookup response
 *     // Type-3 = P2P Text Message 
 *     int type;
 *     string survivorName; // It carries the sender name while sending a text message.
 *     L3Address ip;
 *     int bunkerId;
 *     string textMessage;
 * }
 * </pre>
 */
class INET_API BunkerPacket : public ::inet::FieldsChunk
{
  protected:
    int type = 0;
    ::omnetpp::opp_string survivorName;
    L3Address ip;
    int bunkerId = 0;
    ::omnetpp::opp_string textMessage;

  private:
    void copy(const BunkerPacket& other);

  protected:
    bool operator==(const BunkerPacket&) = delete;

  public:
    BunkerPacket();
    BunkerPacket(const BunkerPacket& other);
    virtual ~BunkerPacket();
    BunkerPacket& operator=(const BunkerPacket& other);
    virtual BunkerPacket *dup() const override {return new BunkerPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getType() const;
    virtual void setType(int type);

    virtual const char * getSurvivorName() const;
    virtual void setSurvivorName(const char * survivorName);

    virtual const L3Address& getIp() const;
    virtual L3Address& getIpForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<BunkerPacket*>(this)->getIp());}
    virtual void setIp(const L3Address& ip);

    virtual int getBunkerId() const;
    virtual void setBunkerId(int bunkerId);

    virtual const char * getTextMessage() const;
    virtual void setTextMessage(const char * textMessage);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const BunkerPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, BunkerPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::BunkerPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::BunkerPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_BUNKERPACKET_M_H

