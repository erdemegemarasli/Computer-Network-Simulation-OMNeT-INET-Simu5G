[Config cableLength_2000km]
*.cableLength = 2000km
output-scalar-file  = results/cableLength_2000km/cableLength_2000km.sca
output-vector-file  = results/cableLength_2000km/cableLength_2000km.vec
[Config cableBandwidth_1000Mbps]
*.cableBandwidth = 1000Mbps
*.closeCableBandwidth = 1000Mbps
output-scalar-file  = results/cableBandwidth_1000Mbps/cableBandwidth_1000Mbps.sca
output-vector-file  = results/cableBandwidth_1000Mbps/cableBandwidth_1000Mbps.vec
[Config serverRouterBufferCapacity_1]
*.*router.eth[*].queue.packetCapacity = 1
output-scalar-file  = results/serverRouterBufferCapacity_1/serverRouterBufferCapacity_1.sca
output-vector-file  = results/serverRouterBufferCapacity_1/serverRouterBufferCapacity_1.vec
[Config clearPacketDropObservation]
*.*router.eth[*].queue.packetCapacity = 1
*.bunkerhost[*].app[0].sendInterval = int(uniform(1s, 1s))
*.bunkerhost[*].app[1].sendInterval = int(uniform(2s, 2s))
output-scalar-file  = results/clearPacketDropObservation/clearPacketDropObservation.sca
output-vector-file  = results/clearPacketDropObservation/clearPacketDropObservation.vec
[Config clearHeartBeatDropObservation]
*.server.app[0].heartbeatThreshold = 3
output-scalar-file  = results/clearHeartBeatDropObservation/clearHeartBeatDropObservation.sca
output-vector-file  = results/clearHeartBeatDropObservation/clearHeartBeatDropObservation.vec
[Config moderateClientAmount]
*.bunker1_host_number = ${config1num=int(uniform(25, 25))}
*.bunker2_host_number = ${config2num=int(uniform(25, 25))}
*.bunker3_host_number = ${config3num=int(uniform(25, 25))}
*.bunker*host[*].app[1].bunker1_host_number = ${config1num}
*.bunker*host[*].app[1].bunker2_host_number = ${config2num}
*.bunker*host[*].app[1].bunker3_host_number = ${config3num}
output-scalar-file  = results/moderateClientAmount/moderateClientAmount.sca
output-vector-file  = results/moderateClientAmount/moderateClientAmount.vec
[Config highClientAmount]
*.bunker1_host_number = ${config1num=int(uniform(80, 80))}
*.bunker2_host_number = ${config2num=int(uniform(80, 80))}
*.bunker3_host_number = ${config3num=int(uniform(80, 80))}
*.bunker*host[*].app[1].bunker1_host_number = ${config1num}
*.bunker*host[*].app[1].bunker2_host_number = ${config2num}
*.bunker*host[*].app[1].bunker3_host_number = ${config3num}
output-scalar-file  = results/highClientAmount/highClientAmount.sca
output-vector-file  = results/highClientAmount/highClientAmount.vec
[Config noNonExistingClient]
*.nonExist_host_number = ${clientxnum=int(uniform(0, 0))}
*.bunker*host[*].app[1].nonExist_host_number = ${xnum}
output-scalar-file  = results/noNonExistingClient/noNonExistingClient.sca
output-vector-file  = results/noNonExistingClient/noNonExistingClient.vec
[Config highNonExistingClient]
*.nonExist_host_number = ${clientxnum=int(uniform(5, 5))}
*.bunker*host[*].app[1].nonExist_host_number = ${xnum}
output-scalar-file  = results/highNonExistingClient/highNonExistingClient.sca
output-vector-file  = results/highNonExistingClient/highNonExistingClient.vec
[Config General]
network = Network

sim-time-limit 		= 500s
seed-0-mt           = 1

output-scalar-file  = results/General/General.sca
output-vector-file  = results/General/General.vec

eventlog-file = results/event.elog
snapshot-file = results/snapshot.sna

# Configurator settings
*.configurator.dumpAddresses = true
*.configurator.dumpTopology = true
*.configurator.dumpLinks = true
*.configurator.dumpRoutes = true
*.configurator.config = xmldoc("config.xml")

# Visualizer settings
*.visualizer.interfaceTableVisualizer.displayInterfaceTables = true
*.visualizer.interfaceTableVisualizer.nodeFilter = "not (*router*)"

# Link settings
*.cableBandwidth = 100Mbps
*.cableLength = 2km
*.closeCableBandwidth = 100Mbps
*.closeCableLength = 1km

*.cableBandwidth.param-record-as-scalar = true
*.cableLength.param-record-as-scalar = true

# Routing settings
*.*.ipv4.arp.typename = "GlobalArp"
*.*.ipv4.routingTable.netmaskRoutes = ""

# Router settings
*.*router.eth[*].queue.typename = "DropTailQueue"
*.*router.eth[*].queue.packetCapacity = 10

*.server.numApps = 1
*.server.app[0].typename = "ServerApp"
*.server.app[0].heartbeatThreshold = 15

# Bunker & Host numbers
*.bunker1_host_number = ${b1num=int(uniform(2, 5))}
*.bunker2_host_number = ${b2num=int(uniform(2, 5))}
*.bunker3_host_number = ${b3num=int(uniform(2, 5))}
*.nonExist_host_number = ${xnum=int(uniform(1, 2))}

*.nonExist_host_number.param-record-as-scalar = true
*.bunker1_host_number.param-record-as-scalar = true
*.bunker2_host_number.param-record-as-scalar = true
*.bunker3_host_number.param-record-as-scalar = true

*.bunker*host[*].numApps = 2
*.bunker*host[*].app[*].destAddress = "server"
*.bunker*host[*].app[0].sendInterval = int(uniform(5s, 10s))
*.bunker*host[*].app[1].sendInterval = int(uniform(6s, 12s))
*.bunker*host[*].app[0].typename = "HeartBeatApp"
*.bunker*host[*].app[1].typename = "ClientApp"

*.bunker*host[*].app[1].bunker1_host_number = ${b1num}
*.bunker*host[*].app[1].bunker2_host_number = ${b1num}
*.bunker*host[*].app[1].bunker3_host_number = ${b3num}
*.bunker*host[*].app[1].nonExist_host_number = ${xnum}

**.downlink_interference = true
**.uplink_interference = true
**.ueTxPower = 26
**.eNodeBTxPower = 46
**.targetBler = 0.01
**.blerShift = 5  
**.fbPeriod = 120   # reports CQI every 120ms

############### CA configuration ################# 
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numerologyIndex = ${u=0}
*.carrierAggregation.componentCarrier[0].carrierFrequency = 2GHz
*.carrierAggregation.componentCarrier[0].numBands = ${numRbs=50}

**.mac.schedulingDisciplineDl = "MAXCI" 
**.mac.schedulingDisciplineUl = "MAXCI"


**.dynamicCellAssociation = true
**.enableHandover = true

*.bunker*gnb*.numX2Apps = 1
*.bunker*gnb*.x2App[*].server.localPort = 5000 + ancestorIndex(1)

*.bunker1gnb1.x2App[0].client.connectAddress = "bunker1gnb2%x2ppp0" 
*.bunker1gnb2.x2App[0].client.connectAddress = "bunker1gnb1%x2ppp0" 

*.bunker2gnb1.x2App[0].client.connectAddress = "bunker2gnb2%x2ppp0" 
*.bunker2gnb2.x2App[0].client.connectAddress = "bunker2gnb1%x2ppp0" 

*.bunker3gnb1.x2App[0].client.connectAddress = "bunker3gnb2%x2ppp0" 
*.bunker3gnb2.x2App[0].client.connectAddress = "bunker3gnb1%x2ppp0" 

*.bunker*gnb*.mobility.initFromDisplayString = false

*.bunker*gnb*.mobility.initialZ = 0m

*.bunker1gnb1.mobility.initialX = 318m
*.bunker1gnb1.mobility.initialY = 211m
*.bunker1gnb2.mobility.initialX = 318m
*.bunker1gnb2.mobility.initialY = 671m

*.bunker2gnb1.mobility.initialX = 735m
*.bunker2gnb1.mobility.initialY = 1228m
*.bunker2gnb2.mobility.initialX = 1557m
*.bunker2gnb2.mobility.initialY = 1228m

*.bunker3gnb1.mobility.initialX = 1890m
*.bunker3gnb1.mobility.initialY = 124m
*.bunker3gnb2.mobility.initialX = 1890m
*.bunker3gnb2.mobility.initialY = 643m


############### SCTP configuration ##################
**.sctp.nagleEnabled = false
**.sctp.enableHeartbeats = false

*.bunker*host[*].macCellId = 0
*.bunker*host[*].masterId = 0
*.bunker*host[*].nrMacCellId = 1
*.bunker*host[*].nrMasterId = 1

*.bunker*host[*].mobility.initFromDisplayString = false
*.bunker*host[*].mobility.speed = 2mps
*.bunker*host[*].mobility.typename = "RandomWaypointMobility"

*.bunker*host[*].mobility.initialZ = 0m
*.bunker*host[*].mobility.constraintAreaMinZ = 0m
*.bunker*host[*].mobility.constraintAreaMaxZ = 0m

*.bunker1host[*].mobility.initialMovementHeading = 90deg
*.bunker1host[*].mobility.initialX = 81m
*.bunker1host[*].mobility.initialY = ${b1y=(ancestorIndex(1) % 2 == 0 ? 550m : 227m)}

*.bunker1host[*].mobility.constraintAreaMinX = 80m
*.bunker1host[*].mobility.constraintAreaMaxX = 350m
*.bunker1host[*].mobility.constraintAreaMinY = ${b1miny=(ancestorIndex(1) % 2 == 0 ? 500m : 200m)}
*.bunker1host[*].mobility.constraintAreaMaxY = ${b1maxy=(ancestorIndex(1) % 2 == 0 ? 700m : 300m)}

*.bunker2host[*].mobility.initialMovementHeading = 0deg
*.bunker2host[*].mobility.initialX = ${b2x=(ancestorIndex(1) % 2 == 0 ? 1350m : 735m)}
*.bunker2host[*].mobility.initialY = 1509m

*.bunker2host[*].mobility.constraintAreaMinX = ${b2minx=(ancestorIndex(1) % 2 == 0 ? 1300m : 700m)}
*.bunker2host[*].mobility.constraintAreaMaxX = ${b2maxx=(ancestorIndex(1) % 2 == 0 ? 1600m : 1000m)}
*.bunker2host[*].mobility.constraintAreaMinY = 1200m
*.bunker2host[*].mobility.constraintAreaMaxY = 1550m

*.bunker3host[*].mobility.initialMovementHeading = 90deg
*.bunker3host[*].mobility.initialX = 2280m
*.bunker3host[*].mobility.initialY = ${b3y=(ancestorIndex(1) % 2 == 0 ? 520m : 100m)}

*.bunker3host[*].mobility.constraintAreaMinX = 1850m
*.bunker3host[*].mobility.constraintAreaMaxX = 2300m
*.bunker3host[*].mobility.constraintAreaMinY = ${b3miny=(ancestorIndex(1) % 2 == 0 ? 500m : 80m)}
*.bunker3host[*].mobility.constraintAreaMaxY = ${b3maxy=(ancestorIndex(1) % 2 == 0 ? 700m : 300m)}
